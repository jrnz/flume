/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cloudera.flume.handlers.avro;  
@SuppressWarnings("all")
public class AvroFlumeOGEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroFlumeOGEvent\",\"namespace\":\"com.cloudera.flume.handlers.avro\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"priority\",\"type\":{\"type\":\"enum\",\"name\":\"Priority\",\"symbols\":[\"FATAL\",\"ERROR\",\"WARN\",\"INFO\",\"DEBUG\",\"TRACE\"]}},{\"name\":\"body\",\"type\":\"bytes\"},{\"name\":\"nanos\",\"type\":\"long\"},{\"name\":\"host\",\"type\":\"string\"},{\"name\":\"fields\",\"type\":{\"type\":\"map\",\"values\":\"bytes\"}}]}");
  @Deprecated public long timestamp;
  @Deprecated public com.cloudera.flume.handlers.avro.Priority priority;
  @Deprecated public java.nio.ByteBuffer body;
  @Deprecated public long nanos;
  @Deprecated public java.lang.CharSequence host;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> fields;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return priority;
    case 2: return body;
    case 3: return nanos;
    case 4: return host;
    case 5: return fields;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: priority = (com.cloudera.flume.handlers.avro.Priority)value$; break;
    case 2: body = (java.nio.ByteBuffer)value$; break;
    case 3: nanos = (java.lang.Long)value$; break;
    case 4: host = (java.lang.CharSequence)value$; break;
    case 5: fields = (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'priority' field.
   */
  public com.cloudera.flume.handlers.avro.Priority getPriority() {
    return priority;
  }

  /**
   * Sets the value of the 'priority' field.
   * @param value the value to set.
   */
  public void setPriority(com.cloudera.flume.handlers.avro.Priority value) {
    this.priority = value;
  }

  /**
   * Gets the value of the 'body' field.
   */
  public java.nio.ByteBuffer getBody() {
    return body;
  }

  /**
   * Sets the value of the 'body' field.
   * @param value the value to set.
   */
  public void setBody(java.nio.ByteBuffer value) {
    this.body = value;
  }

  /**
   * Gets the value of the 'nanos' field.
   */
  public java.lang.Long getNanos() {
    return nanos;
  }

  /**
   * Sets the value of the 'nanos' field.
   * @param value the value to set.
   */
  public void setNanos(java.lang.Long value) {
    this.nanos = value;
  }

  /**
   * Gets the value of the 'host' field.
   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'fields' field.
   */
  public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getFields() {
    return fields;
  }

  /**
   * Sets the value of the 'fields' field.
   * @param value the value to set.
   */
  public void setFields(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
    this.fields = value;
  }

  /** Creates a new AvroFlumeOGEvent RecordBuilder */
  public static com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder newBuilder() {
    return new com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder();
  }
  
  /** Creates a new AvroFlumeOGEvent RecordBuilder by copying an existing Builder */
  public static com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder newBuilder(com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder other) {
    return new com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder(other);
  }
  
  /** Creates a new AvroFlumeOGEvent RecordBuilder by copying an existing AvroFlumeOGEvent instance */
  public static com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder newBuilder(com.cloudera.flume.handlers.avro.AvroFlumeOGEvent other) {
    return new com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder(other);
  }
  
  /**
   * RecordBuilder for AvroFlumeOGEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroFlumeOGEvent>
    implements org.apache.avro.data.RecordBuilder<AvroFlumeOGEvent> {

    private long timestamp;
    private com.cloudera.flume.handlers.avro.Priority priority;
    private java.nio.ByteBuffer body;
    private long nanos;
    private java.lang.CharSequence host;
    private java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> fields;

    /** Creates a new Builder */
    private Builder() {
      super(com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing AvroFlumeOGEvent instance */
    private Builder(com.cloudera.flume.handlers.avro.AvroFlumeOGEvent other) {
            super(com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = (java.lang.Long) data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.priority)) {
        this.priority = (com.cloudera.flume.handlers.avro.Priority) data().deepCopy(fields()[1].schema(), other.priority);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.body)) {
        this.body = (java.nio.ByteBuffer) data().deepCopy(fields()[2].schema(), other.body);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nanos)) {
        this.nanos = (java.lang.Long) data().deepCopy(fields()[3].schema(), other.nanos);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.host)) {
        this.host = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.host);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.fields)) {
        this.fields = (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>) data().deepCopy(fields()[5].schema(), other.fields);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'timestamp' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'priority' field */
    public com.cloudera.flume.handlers.avro.Priority getPriority() {
      return priority;
    }
    
    /** Sets the value of the 'priority' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder setPriority(com.cloudera.flume.handlers.avro.Priority value) {
      validate(fields()[1], value);
      this.priority = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'priority' field has been set */
    public boolean hasPriority() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'priority' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder clearPriority() {
      priority = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'body' field */
    public java.nio.ByteBuffer getBody() {
      return body;
    }
    
    /** Sets the value of the 'body' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder setBody(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.body = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'body' field has been set */
    public boolean hasBody() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'body' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder clearBody() {
      body = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'nanos' field */
    public java.lang.Long getNanos() {
      return nanos;
    }
    
    /** Sets the value of the 'nanos' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder setNanos(long value) {
      validate(fields()[3], value);
      this.nanos = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'nanos' field has been set */
    public boolean hasNanos() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'nanos' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder clearNanos() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'host' field */
    public java.lang.CharSequence getHost() {
      return host;
    }
    
    /** Sets the value of the 'host' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.host = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'host' field has been set */
    public boolean hasHost() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'host' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder clearHost() {
      host = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'fields' field */
    public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getFields() {
      return fields;
    }
    
    /** Sets the value of the 'fields' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder setFields(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
      validate(fields()[5], value);
      this.fields = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'fields' field has been set */
    public boolean hasFields() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'fields' field */
    public com.cloudera.flume.handlers.avro.AvroFlumeOGEvent.Builder clearFields() {
      fields = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public AvroFlumeOGEvent build() {
      try {
        AvroFlumeOGEvent record = new AvroFlumeOGEvent();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.priority = fieldSetFlags()[1] ? this.priority : (com.cloudera.flume.handlers.avro.Priority) defaultValue(fields()[1]);
        record.body = fieldSetFlags()[2] ? this.body : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.nanos = fieldSetFlags()[3] ? this.nanos : (java.lang.Long) defaultValue(fields()[3]);
        record.host = fieldSetFlags()[4] ? this.host : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.fields = fieldSetFlags()[5] ? this.fields : (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
